@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using System.Timers

<PageTitle>Home</PageTitle>

<div class="container">
    <div class="row">
        <div class="col col-md-8">
            <div class="embed-responsive embed-responsive-16by9">
                <iframe src="https://obs.ninja/?view=robot&scene&room=bcsdemo&password=BCSDemo1234"
                        class="embed-responsive-item" />
            </div>
        </div>
        <div class="col col-md-4" style="max-height: 380px; overflow-y: scroll;" id="messagesDiv">
            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
        </div>
    </div>
</div>

<div class="form-group row" hidden="@servo1Disabled">
    <label>
        Rotation (@servo1):
    </label>
    <MatSlider Value="@servo1" Immediate="true" Step="1" EnableStep="true" ValueMin="0" ValueMax="180"
               Markers="true" Pin="true" TValue="int" Discrete="true" ValueChanged="@UpdateServo1Value"></MatSlider>
</div>

<div class="form-group row" hidden="@(!servo1Disabled)">
    <label>
        Rotation (@servo1): Please wait...
    </label>
</div>

<div class="form-group row" hidden="@servo2Disabled">
    <label>
        Reach (@servo2):
    </label>
    <MatSlider Value="@servo2" Immediate="true" Step="1" EnableStep="true" ValueMin="0" ValueMax="180"
               Markers="true" Pin="true" TValue="int" Discrete="true" ValueChanged="@UpdateServo2Value"></MatSlider>
</div>

<div class="form-group row" hidden="@(!servo2Disabled)">
    <label>
        Reach (@servo2): Please wait...
    </label>
</div>

<div class="form-group row" hidden="@servo3Disabled">
    <label>
        Grab (@servo3):
    </label>
    <MatSlider Value="@servo3" Immediate="true" Step="1" EnableStep="true" ValueMin="75" ValueMax="180"
               Markers="true" Pin="true" TValue="int" Discrete="true" ValueChanged="@UpdateServo3Value"></MatSlider>
</div>

<div class="form-group row" hidden="@(!servo3Disabled)">
    <label>
        Grab (@servo3): Please wait...
    </label>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    private Timer disableServo1Timer = new Timer(1000);
    private Timer disableServo2Timer = new Timer(1000);
    private Timer disableServo3Timer = new Timer(1000);

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        disableServo1Timer.Elapsed += servo1DisableTimerExpired;
        disableServo2Timer.Elapsed += servo2DisableTimerExpired;
        disableServo3Timer.Elapsed += servo3DisableTimerExpired;

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
                var encodedMsg = $"{user}: {message}";
                messages.Add(encodedMsg);

                switch (user)
                {
                    case "servo1":
                        servo1 = Int32.Parse(message);

                        servo1Disabled = true;
                        disableServo1Timer.AutoReset = false;
                        disableServo1Timer.Start();

                        InvokeAsync(StateHasChanged);
                        break;
                    case "servo2":
                        servo2 = Int32.Parse(message);

                        servo2Disabled = true;
                        disableServo2Timer.AutoReset = false;
                        disableServo2Timer.Start();

                        InvokeAsync(StateHasChanged);
                        break;
                    case "servo3":
                        servo3 = Int32.Parse(message);

                        servo3Disabled = true;
                        disableServo3Timer.AutoReset = false;
                        disableServo3Timer.Start();

                        InvokeAsync(StateHasChanged);
                        break;
                    default:
                        break;
                }
            });

        await InvokeAsync(StateHasChanged);

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection?.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;


    private void servo1DisableTimerExpired(Object source, ElapsedEventArgs e)
    {
        servo1Disabled = false;
        InvokeAsync(StateHasChanged);
    }

    private void servo2DisableTimerExpired(Object source, ElapsedEventArgs e)
    {
        servo2Disabled = false;
        InvokeAsync(StateHasChanged);
    }

    private void servo3DisableTimerExpired(Object source, ElapsedEventArgs e)
    {
        servo3Disabled = false;
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public int servo1 { get; set; } = 90;

    public int servo2 { get; set; } = 90;

    public int servo3 { get; set; } = 130;

    public bool servo1Disabled { get; set; } = false;

    public bool servo2Disabled { get; set; } = false;

    public bool servo3Disabled { get; set; } = false;

    private void UpdateServo1Value(int val)
    {
        servo1 = val;
        StateHasChanged();
        hubConnection.SendAsync("SendMessage", "servo1", val.ToString());
    }

    private void UpdateServo2Value(int val)
    {
        servo2 = val;
        StateHasChanged();
        hubConnection.SendAsync("SendMessage", "servo2", val.ToString());
    }

    private void UpdateServo3Value(int val)
    {
        servo3 = val;
        StateHasChanged();
        hubConnection.SendAsync("SendMessage", "servo3", val.ToString());
    }
} 